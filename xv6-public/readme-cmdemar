Claire DeMars
Proj 3

Scheduler
	basic setup of system calls in regular files and sysproc.c The sysproc.c versions manage error return values
	proc.h - new proc state (priority, time_last_changed, lticks, hticks)
	proc.c - Initialization of new proc state in allocproc(). 
		Implemented syscalls. Each updates the lticks and hticks based on the time_last_changed.
		The ptable knows which priority of processes it should run (ptable.priority_mode). This is 
		set to 2 when a proc calls setpri(2) or when the scheduler finds a proc with priority 2 (not sure why the second is
		necessary, but it didn't work otherwise). It is set to 1 when it 
		is initialized or when a full pass of the ptable is completed where no runnable proc of
		priority 2 was found. 
		The scheduler function now not only checks if there is a runnable process, 
		but if that process is the right priority. 

	test.c
		- i added info to the pstat, to say what priority each process was, and checked I could set it correctly
		- checked the return values for the sys calls
		- checked that a higher priority process did run before a low priority one


File System Checking
	- fscheck.c
	- i attempted all the checks except the bitmap ones (#6 and #7 in the instructions), although I did setup the structure that I would have compared the bitmap to (datablock_bitmap_per_inode_pointers). I'm really rusty on bitshifting stuff
	- for the directory checks I made a function get_dirent, it inefficient but convenient, like rinode.
	- I went through the inodes twice
		On the first time I check criteria 1. I go through all datablocks addresses, checking criteria 2 (valid address) and building a array of which datablocks are used. While building it, if a datablock is ever claimed to be used twice, I make an error, to meet criteria 8. If the inode is a dir, I go through all its directory entries, storing inode reference counts to use later, and checking criteria 4 and 5. 
		The second time through I check criteria 9, 10, 11, 12 by comparing the inode reference counts from last time with the inode type (which indicates if it is inuse, for #9, and if it is a directory, for #12) and the inode nlink variable (for #10 and #11).
	- The missing step would be to compare to the bitmap the datablocks array (from the first time through the inodes), comparing in both directions. 
	- I tested my code in a limited way, by printing relevant structures along the way and making sure the basic fs.img didn't cause any errors
	
File System Integrity - ensuring it
	- 
	
